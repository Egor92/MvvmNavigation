name: CI/CD Pipeline

on:
  push:
    branches:
      - '**' # Запускаем для всех веток
  pull_request:
    branches:
      - '**' # Запускаем для pull request'ов в любую ветку

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Получаем всю историю коммитов для создания тега

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '3.1.x' # Укажите нужную версию .NET SDK

    - name: Restore dependencies
      working-directory: ./code # Указываем папку с решением
      run: dotnet restore

    - name: Calculate versions
      id: calculate_versions
      shell: bash
      run: |
        # Читаем версию из файла version.txt
        ASSEMBLY_VERSION=$(cat version.txt | tr -d '\n' | tr -d '\r')
        echo "Assembly Version: $ASSEMBLY_VERSION"

        # Вычисляем AssemblyFileVersion и AssemblyInformationalVersion
        BUILD_NUMBER=${{ github.run_number }}
        ASSEMBLY_FILE_VERSION="$ASSEMBLY_VERSION.$BUILD_NUMBER"
        ASSEMBLY_INFORMATIONAL_VERSION="$ASSEMBLY_VERSION.$BUILD_NUMBER"

        # Сохраняем значения в выходные переменные
        echo "::set-output name=assembly_version::$ASSEMBLY_VERSION"
        echo "::set-output name=assembly_file_version::$ASSEMBLY_FILE_VERSION"
        echo "::set-output name=assembly_informational_version::$ASSEMBLY_INFORMATIONAL_VERSION"

    - name: Build project
      working-directory: ./code # Указываем папку с решением
      shell: bash
      run: |
        ASSEMBLY_VERSION=${{ steps.calculate_versions.outputs.assembly_version }}
        ASSEMBLY_FILE_VERSION=${{ steps.calculate_versions.outputs.assembly_file_version }}
        ASSEMBLY_INFORMATIONAL_VERSION=${{ steps.calculate_versions.outputs.assembly_informational_version }}

        echo "Building with AssemblyVersion=$ASSEMBLY_VERSION"
        echo "Building with AssemblyFileVersion=$ASSEMBLY_FILE_VERSION"
        echo "Building with AssemblyInformationalVersion=$ASSEMBLY_INFORMATIONAL_VERSION"

        dotnet build --configuration Release --no-restore //p:AssemblyVersion=$ASSEMBLY_VERSION //p:AssemblyFileVersion=$ASSEMBLY_FILE_VERSION //p:AssemblyInformationalVersion=$ASSEMBLY_INFORMATIONAL_VERSION

    - name: Run tests
      working-directory: ./code # Указываем папку с решением
      run: dotnet test --no-restore --verbosity normal

    - name: Pack NuGet package
      working-directory: ./code # Указываем папку с решением
      shell: bash
      run: |
        ASSEMBLY_VERSION=${{ steps.calculate_versions.outputs.assembly_version }}
        ASSEMBLY_FILE_VERSION=${{ steps.calculate_versions.outputs.assembly_file_version }}
        ASSEMBLY_INFORMATIONAL_VERSION=${{ steps.calculate_versions.outputs.assembly_informational_version }}

        echo "Packing with AssemblyVersion=$ASSEMBLY_VERSION"
        echo "Packing with AssemblyFileVersion=$ASSEMBLY_FILE_VERSION"
        echo "Packing with AssemblyInformationalVersion=$ASSEMBLY_INFORMATIONAL_VERSION"

        dotnet pack --configuration Release --output ./artifacts //p:AssemblyVersion=$ASSEMBLY_VERSION //p:AssemblyFileVersion=$ASSEMBLY_FILE_VERSION //p:AssemblyInformationalVersion=$ASSEMBLY_INFORMATIONAL_VERSION //p:PackageVersion=$ASSEMBLY_VERSION

    - name: Upload NuGet packages as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ./code/artifacts/*.nupkg

    - name: Publish NuGet package
      if: github.ref == 'refs/heads/master' # Публикуем только для ветки master
      working-directory: ./code # Указываем папку с решением
      shell: bash
      run: |
        dotnet nuget push ./artifacts/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json

    - name: Create Git Tag
      if: github.ref == 'refs/heads/master' # Создаём тег только для ветки master
      shell: bash
      run: |
        # Получаем ASSEMBLY_VERSION из шага calculate_versions
        ASSEMBLY_VERSION=${{ steps.calculate_versions.outputs.assembly_version }}
        echo "Assembly Version: $ASSEMBLY_VERSION"

        # Формируем имя тега
        TAG_NAME="release-$ASSEMBLY_VERSION"
        echo "Creating tag: $TAG_NAME"

        # Создаём тег
        git tag -a $TAG_NAME -m "Release $TAG_NAME"

        # Отправляем тег в репозиторий
        git push origin $TAG_NAME
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Используем встроенный токен для отправки тега